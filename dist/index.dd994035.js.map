{"mappings":"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","sources":["<anon>","src/ajax-form.ts"],"sourcesContent":["class $9620c7a73c74a2a0$export$45c395d60127f0d0 extends HTMLElement {\n    get bubbles() {\n        return Boolean(JSON.parse(this.getAttribute(\"event-bubbles\") || \"true\"));\n    }\n    set bubbles(value) {\n        this.setAttribute(\"event-bubbles\", String(value));\n    }\n    static get observedAttributes() {\n        return [\n            \"event-bubbles\"\n        ];\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        console.log(name, oldValue, newValue);\n    }\n    constructor(){\n        super();\n        this.attachShadow({\n            mode: \"open\"\n        });\n        this.shadowRoot?.appendChild(this.template.content.cloneNode(true));\n    }\n    _serializeFormToJson() {\n        if (!this._form) return null;\n        let result = {};\n        const iterateElem = (node)=>{\n            //console.log( node.nodeName )\n            if (node.nodeType === this.ELEMENT_NODE) {\n                if (node.nodeName === \"INPUT\" || node.nodeName === \"SELECT\") {\n                    const input = node;\n                    //console.log( \"selected\", input.name )\n                    if (input.name.length > 0) result[input.name] = input.value;\n                } else node.childNodes.forEach(iterateElem);\n            }\n        };\n        this._form.childNodes.forEach(iterateElem);\n        return result;\n    }\n    _fire(event, data) {\n        const b = this.bubbles;\n        console.log(b);\n        this.dispatchEvent(new CustomEvent(event, {\n            bubbles: b,\n            detail: data\n        }));\n    }\n    submit() {\n        if (!this._form) return;\n        const valid = this._form.reportValidity();\n        console.log(\"valid\", valid);\n        if (valid) this._onSubmit();\n    }\n    _onSubmit(event) {\n        if (!this._form) return;\n        //console.log( event )\n        if (event) event.preventDefault();\n        const data = this._serializeFormToJson();\n        //console.dir( data )\n        try {\n            fetch(this._form.action, {\n                method: \"POST\",\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                //redirect: 'follow', // manual, *follow, error\n                referrerPolicy: \"no-referrer\",\n                body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n            }).then((res)=>this._fire(\"ajax-form.result\", res)).catch((err)=>this._fire(\"ajax-form.error\", err));\n        } catch (err) {\n            this._fire(\"ajax-form.error\", err);\n        }\n    }\n    reset(event) {\n        if (event) event.preventDefault();\n        console.log(event);\n        if (this._form) this._form.reset();\n    }\n    _init() {\n        if (this._form) {\n            console.log(\"init\");\n            this._form.addEventListener(\"submit\", (ev)=>this._onSubmit(ev));\n            this._form.addEventListener(\"reset\", (ev)=>this.reset(ev));\n        }\n    }\n    connectedCallback() {\n        const observer = new MutationObserver((mutations)=>{\n            const result = mutations.find((record)=>record.addedNodes[0].nodeName === \"FORM\");\n            if (result) {\n                console.debug(\"MutationObserver\", result);\n                this._form = result.addedNodes[0];\n                this._init();\n            }\n            observer.disconnect();\n        });\n        observer.observe(this, {\n            childList: true\n        });\n        const f = this.shadowRoot?.querySelector(\"[slot='form']\");\n        console.log(\"form\", f);\n        const f1 = this.querySelector(\"[slot='form'] form\");\n        console.log(\"form\", f1);\n    }\n    disconnectedCallback() {}\n    get template() {\n        const template = document.createElement(\"template\");\n        template.innerHTML = `\n          <slot name=\"form\">FORM</slot>\n        `;\n        return template;\n    }\n}\ntry {\n    customElements.define(\"ajax-form\", $9620c7a73c74a2a0$export$45c395d60127f0d0);\n} catch (err) {\n    console.dir(err);\n}\n\n\n//# sourceMappingURL=index.dd994035.js.map\n","\ntype FormData = {\n    [id:string]:string\n}\n\n// @see\n// https://dev.to/aspittel/building-web-components-with-vanilla-javascript--jho\n\nexport class AjaxFormElement extends HTMLElement {\n\n    get bubbles():boolean {   \n        return Boolean(JSON.parse(this.getAttribute('event-bubbles') || 'true'))\n    }\n\n    set bubbles( value:boolean ) {\n        this.setAttribute( 'event-bubbles', String(value) );\n    }\n\n\n    static get observedAttributes() {\n        return ['event-bubbles'];\n    }\n\n    attributeChangedCallback(name:string, oldValue:string, newValue:string) { \n\n        console.log( name, oldValue, newValue)\n    }\n\n    /*\n    get method():string {   \n        return this.getAttribute('method') || 'POST';\n    }\n\n    set method( value:string ) {\n        this.setAttribute( 'method', value );\n    }\n\n    get mode():string {   \n        return this.getAttribute('onError') || 'cors';\n    }\n\n    set mode( value:string ) {\n        this.setAttribute( 'mode', value );\n    }\n\n    */\n\n    private _form?:HTMLFormElement\n\n    constructor() {\n        super()\n\n        this.attachShadow( { mode: 'open'} )\n        this.shadowRoot?.appendChild( this.template.content.cloneNode(true) )\n\n    }\n\n    private _serializeFormToJson():FormData|null {\n        if( !this._form ) {\n            return null\n        }\n\n        let result:FormData = {}\n        \n        const iterateElem = ( node:ChildNode ) => {\n\n            //console.log( node.nodeName )\n            if( node.nodeType === this.ELEMENT_NODE ) {\n\n                if (node.nodeName === 'INPUT'|| node.nodeName === 'SELECT') {\n\n                    const input = node as HTMLSelectElement|HTMLInputElement\n                    \n                    //console.log( \"selected\", input.name )\n                    if( input.name.length > 0 ) {\n                        result[input.name] = input.value\n                    }\n                }\n                else {\n                    node.childNodes.forEach( iterateElem )\n                }\n            } \n\n        }\n\n        this._form.childNodes.forEach( iterateElem )\n\n        return result\n\n    }\n\n    private _fire( event:string, data:any ) {\n        const b = this.bubbles\n        console.log( b )\n        this.dispatchEvent(new CustomEvent(event , { bubbles: b, detail: data} ));\n    }\n\n    public submit() {\n        if( !this._form ) {\n            return\n        }\n\n        const valid = this._form.reportValidity()\n        console.log( 'valid', valid )\n        if( valid ) {\n            this._onSubmit()\n        }\n\n    }\n    private _onSubmit( event?:Event ) {\n        if( !this._form ) {\n            return\n        }\n\n        //console.log( event )\n        if (event) {\n            event.preventDefault();\n        }\n\n        \n        const data = this._serializeFormToJson()   \n        //console.dir( data )\n\n        try  {\n            fetch( this._form.action, {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                //redirect: 'follow', // manual, *follow, error\n                referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n            })\n            .then( res =>  this._fire( 'ajax-form.result', res ))\n            .catch( err => this._fire( 'ajax-form.error', err ))\n\n        }\n        catch( err ) {\n            this._fire( 'ajax-form.error', err  );\n        }\n\n    }\n\n    public reset( event?:Event ) {\n        if (event) {\n            event.preventDefault();\n          }\n\n          console.log( event )\n          if( this._form ) {\n              this._form.reset()\n          }\n      \n    }\n    private _init() {\n        if( this._form ) {\n            console.log( 'init' )\n            this._form.addEventListener('submit',  ev => this._onSubmit(ev) )\n            this._form.addEventListener('reset', ev => this.reset(ev) )\n        }\n    }\n\n    connectedCallback () {\n\n        const observer = new MutationObserver( (mutations) => {\n            const result = mutations.find( record => record.addedNodes[0].nodeName === 'FORM' )\n            if( result ) {\n                \n                console.debug( \"MutationObserver\", result )\n\n                this._form = result.addedNodes[0] as HTMLFormElement\n                this._init()\n            }  \n            observer.disconnect()        \n        });\n\n        observer.observe( this , { childList:true } )\n\n        const f = this.shadowRoot?.querySelector( \"[slot='form']\" );\n        console.log( \"form\", f)\n        const f1 = this.querySelector( \"[slot='form'] form\" );\n        console.log( \"form\", f1)\n\n      }\n\n    disconnectedCallback () {\n    }\n\n    get template():HTMLTemplateElement {\n        const template = document.createElement('template');\n\n        template.innerHTML = `\n          <slot name=\"form\">FORM</slot>\n        `;\n\n        return template\n    } \n}\n\ntry {\n\n    customElements.define('ajax-form', AjaxFormElement);\n\n} catch (err) {\n    console.dir( err );\n}"],"names":["$9620c7a73c74a2a0$export$45c395d60127f0d0","HTMLElement","bubbles","Boolean","JSON","parse","getAttribute","value","setAttribute","String","observedAttributes","attributeChangedCallback","name","oldValue","newValue","console","log","constructor","attachShadow","mode","shadowRoot","appendChild","template","content","cloneNode","_serializeFormToJson","_form","result","iterateElem","node","nodeType","ELEMENT_NODE","nodeName","input","length","childNodes","forEach","_fire","event","data","b","dispatchEvent","CustomEvent","detail","submit","valid","reportValidity","_onSubmit","preventDefault","fetch","action","method","headers","referrerPolicy","body","stringify","then","res","catch","err","reset","_init","addEventListener","ev","connectedCallback","observer","MutationObserver","mutations","find","record","addedNodes","debug","disconnect","observe","childList","querySelector","disconnectedCallback","document","createElement","innerHTML","customElements","define","dir"],"version":3,"file":"index.dd994035.js.map"}